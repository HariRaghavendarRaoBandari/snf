diff --git include/click/router.hh include/click/router.hh
index dc83606..25e50d5 100644
--- include/click/router.hh
+++ include/click/router.hh
@@ -129,7 +129,14 @@ class Router { public:
     inline Router* hotswap_router() const;
     void set_hotswap_router(Router* router);
 
-    int initialize(ErrorHandler* errh);
+    /*
+     * NF Synthesis Modification to prevent Click from initializing the elements in this call.
+     * We simply want to have the Click DAG populated with all the elements and connections.
+     * The 2nd argument is set to false by default. This is how normal Click calls the function
+     * so it does not affect normal Click executions.
+     */
+    int initialize(ErrorHandler* errh, bool initialize_only_dag=false);
+
     void activate(bool foreground, ErrorHandler* errh);
     inline void activate(ErrorHandler* errh);
     inline void set_foreground(bool foreground);
diff --git lib/router.cc lib/router.cc
index d345236..3173f94 100644
--- lib/router.cc
+++ lib/router.cc
@@ -117,7 +117,8 @@ Router::~Router()
 	for (int ord = _elements.size() - 1; ord >= 0; ord--)
 	    _elements[ _element_configure_order[ord] ]->cleanup(Element::CLEANUP_ROUTER_INITIALIZED);
     } else if (_state != ROUTER_DEAD) {
-	assert(_element_configure_order.size() == 0 && _state <= ROUTER_PRECONFIGURE);
+        // We do not follow all the Click states thus this assertion must be commented
+	//assert(_element_configure_order.size() == 0 && _state <= ROUTER_PRECONFIGURE);
 	for (int i = _elements.size() - 1; i >= 0; i--)
 	    _elements[i]->cleanup(Element::CLEANUP_NO_ROUTER);
     }
@@ -151,6 +152,10 @@ Router::~Router()
 	delete ns;
     }
     delete _name_info;
+
+    // Return here because we haven't registered our Router in the first place
+    return;
+
     if (_master)
 	_master->unregister_router(this);
 }
@@ -1085,7 +1090,7 @@ Router::initialize_handlers(bool defaults, bool specifics)
 }
 
 int
-Router::initialize(ErrorHandler *errh)
+Router::initialize(ErrorHandler *errh, bool initialize_only_dag)
 {
     if (_state != ROUTER_NEW)
 	return errh->error("second attempt to initialize router");
@@ -1165,6 +1170,15 @@ Router::initialize(ErrorHandler *errh)
 	}
     }
 
+    //////////////////////////////////////////////////////////////////////////////
+    /*
+     * NF Synthesis modification to prevent the initialization of Click elements
+     * It happens only when the boolean argument is true. Default is false.
+     */
+    //////////////////////////////////////////////////////////////////////////////
+    if ( initialize_only_dag )
+	return 0;
+
 #if CLICK_DMALLOC
     CLICK_DMALLOC_REG("iHoo");
 #endif
