//============================================================================
//        Name: parser_configuration.hpp
//   Copyright: KTH ICT CoS Network Systems Lab
// Description: Defines the parsing mechanisms that feed the NF Synthesizer.
//              Represents a NF chain as a digraph of interconnected NFs while
//              another digraph shows the connectivity of this chain with
//              external NFV domains.
//============================================================================

#ifndef _PARSER_CONFIG_HPP_
#define _PARSER_CONFIG_HPP_

#include "../graph/graph.hpp"
#include "generic_configuration.hpp"

// Default folder to save the synthesized Click configuration
#define DEFAULT_HYPER_NF_OUT_FOLDER static_cast<std::string> ("./results")

// Default filename to save the synthesized Click (and RSS) configuration(s)
#define DEFAULT_HYPER_NF_CONF_NAME static_cast<std::string> ("synth-nf")

/*
 * Class loads the NF chain configuration from a property file and builds the graph of the chain
 */
class ParserConfiguration : public GenericConfiguration {
	private:
		/*
		 * A Directed Acyclic Graph of chained NFs
		 */
		Graph* nf_chain;

		/*
		 * Another DAG that shows how the NF chain is connected to several domains
		 */
		Graph* nf_domains;

		/*
		 * Output folder. This is where Hyper-NF Generator places the output files.
		 */
		std::string output_folder;

		/*
		 * Output filename. This is the file generated by Hyper-NF (in the output_folder).
		 * Note that based on the property file choices, this can be either one .click file
		 * (i.e., output_filename.click) or a set of files (e.g., output_filename.click and
		 * output_filename.rss)
		 */
		std::string output_filename;

		/*
		 * Boolean that indicates whether the final output will target Intel-RSS + Click DPDK
		 * or simply Click.
		 */
		bool hardware_classification;

	public:
		/*
		 * Constructor that loads the property file by calling the super class
		 */
		ParserConfiguration(const std::string& config_file);
		~ParserConfiguration();

		/*
		 * Setters & Getters
		 */
		inline Graph* get_chain        (void) { return this->nf_chain;   };
		inline Graph* get_chain_domains(void) { return this->nf_domains; };

		inline std::string get_output_folder  (void)  { return this->output_folder;   }
		inline std::string get_output_filename(void)  { return this->output_filename; }

		inline bool has_hardware_classification(void) { return this->hardware_classification; }

		/*
		 * Implements load_property_file (abstract method in the super class)
		 */
		short load_property_file(void);

	private:
		/*
		 * Read the generic parameters of the Chain Configurator
		 */
		short parse_generic_properties(void);

		/*
		 * Parse the internal NF chain connections
		 */
		short parse_topology(const std::string& nf_topo);

		/*
		 * Parse the external NF chain connections with various domains
		 */
		short parse_domains(const std::string& nf_domains);

		/*
		 * Check whether the formulated graph of the chain is acyclic
		 */
		short check_for_loops(void);

		/*
		 * Extract numbers from strings
		 */
		std::string get_number_from_string(std::string const& str);

		/*
		 * Print error messages regarding the property file
		 */
		void usage(const std::string& message, const std::string& usage);

		/*
		 * Print the loaded configuration
		 */
		void print_loaded_property_status(void);
};

#endif
