##############################################################################################
####### This is a test property file to try your first synthesis examples.
####### Follow the guidelines and you should be able to successfully synthesize the examples below.
####### Please use the bitbucket wiki to report any bugs or contact katsikas@kth.se
##############################################################################################

##############################################################################################
#######
####### SECTION 1: In this section you specifiy the generic properties such as system properties
#######            or paths where the results will be stored. If you do not specify some of these
#######            properties, default ones will be used, so pay attention.
#######
[GENERIC]
OUTPUT_FOLDER           = ./results
OUTPUT_FILE             = synth_router_10.click

HARDWARE_CLASSIFICATION = true
# Options: RSS-Hashing, Flow-Director, OpenFlow
HARDWARE_CLASSIFICATION_FORMAT = RSS-Hashing

NUMA                    = true
CPU_SOCKETS             = 2
CPU_CORES               = 16
NIC_HW_QUEUES           = 16

##############################################################################################
#######
####### SECTION 2: In this section you specifiy the modules you want to chain. 
####### Use NF_number to specify the placement of the module in the chain. See the example below.
#######
[NF_MODULES]

### TOPO 1
#
#  PZ --- |NAT| --- |NAT| --- Internet
#
#NF_1 = input/nf_repo/dpdk/napt_chain_8/nf1.click
#NF_2 = input/nf_repo/dpdk/napt_chain_8/nf2.click
#NF_3 = input/nf_repo/dpdk/napt_chain_8/nf3.click
#NF_4 = input/nf_repo/dpdk/napt_chain_8/nf4.click
#NF_5 = input/nf_repo/dpdk/napt_chain_8/nf5.click
#NF_6 = input/nf_repo/dpdk/napt_chain_8/nf6.click
#NF_7 = input/nf_repo/dpdk/napt_chain_8/nf7.click
#NF_8 = input/nf_repo/dpdk/napt_chain_8/nf8.click

NF_1  = input/nf_repo/dpdk/router_chain_10/nf1.click
NF_2  = input/nf_repo/dpdk/router_chain_10/nf2.click
NF_3  = input/nf_repo/dpdk/router_chain_10/nf3.click
NF_4  = input/nf_repo/dpdk/router_chain_10/nf4.click
NF_5  = input/nf_repo/dpdk/router_chain_10/nf5.click
NF_6  = input/nf_repo/dpdk/router_chain_10/nf6.click
NF_7  = input/nf_repo/dpdk/router_chain_10/nf7.click
NF_8  = input/nf_repo/dpdk/router_chain_10/nf8.click
NF_9  = input/nf_repo/dpdk/router_chain_10/nf9.click
NF_10 = input/nf_repo/dpdk/router_chain_10/nf10.click


#######
####### SECTION 3: In this section you specifiy the topology of the modules.
####### Use NF_number1[iface] -> [iface]NF_number2 to connect NFs. See the example below.
#######
[NF_TOPO]

### TOPO 1
#TOPOLOGY = NF_1[nf1vif1] -> [nf2vif0]NF_2;
TOPOLOGY = NF_1[nf1vif1] -> [nf2vif0]NF_2; NF_2[nf2vif1] -> [nf3vif0]NF_3; NF_3[nf3vif1] -> [nf4vif0]NF_4; NF_4[nf4vif1] -> [nf5vif0]NF_5; NF_5[nf5vif1] -> [nf6vif0]NF_6; NF_6[nf6vif1] -> [nf7vif0]NF_7; NF_7[nf7vif1] -> [nf8vif0]NF_8; NF_8[nf8vif1] -> [nf9vif0]NF_9; NF_9[nf9vif1] -> [nf10vif0]NF_10;


#######
####### SECTION 4: In this section you specifiy the entry/end points of the chain.
#######            In other words, how the chain is connected to the outside world.
#######            Use [iface]NF_number to indicate interface 'iface' as entry/end 
#######            point. See the examples below.
#######
[ENTRY_POINTS]
### TOPO 1
DOMAINS  = [nf1vif0]NF_1
##############################################################################################
